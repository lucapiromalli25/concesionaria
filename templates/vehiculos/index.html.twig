{% extends 'base.html.twig' %}
{% block title %}Gestión de Vehículos{% endblock %}

{% block body %}
<div class="page-header"><h3 class="fw-bold mb-3">Inventario de Vehículos</h3></div>
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex align-items-center">
                    <h4 class="card-title">Listado de Vehículos</h4>
                    <button id="btn-nuevo-vehiculo" class="btn btn-primary btn-round ms-auto">
                        <i class="fa fa-plus"></i> Agregar Vehículo
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover" id="tabla-vehiculos">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Vehículo</th>
                                <th>Año</th>
                                <th>Color</th>
                                <th>Precio Venta</th>
                                <th class="text-end">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                        {% for vehiculo in vehiculos %}
                            <tr data-id="{{ vehiculo.id }}">
                                <td>{{ vehiculo.id }}</td>
                                <td class="vehiculo-desc">
                                    <span class="fw-bold">{{ vehiculo.version.modelo.marca.name }} {{ vehiculo.version.modelo.name }}</span><br>
                                    <small>{{ vehiculo.version.name }}</small>
                                </td>
                                <td class="vehiculo-ano">{{ vehiculo.anio }}</td>
                                <td class="vehiculo-color">{{ vehiculo.color }}</td>
                                <td class="vehiculo-precio">${{ vehiculo.suggestedRetailPrice|number_format(2, ',', '.') }}</td>
                                <td class="text-end">
                                    <button class="btn btn-warning btn-sm btn-editar">Editar</button>
                                </td>
                            </tr>
                        {% else %}
                            <tr id="fila-sin-vehiculos"><td colspan="6" class="text-center">No se encontraron vehículos</td></tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="formModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="formModalLabel">Nuevo Vehículo</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="modal-body-content"></div>
    </div>
  </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const formModal = new bootstrap.Modal(document.getElementById('formModal'));
        const modalBody = document.getElementById('modal-body-content');
        const modalTitle = document.getElementById('formModalLabel');
        const tablaBody = document.querySelector('#tabla-vehiculos tbody');

        function initializeSelect2() {
            $('#formModal .form-select').select2({
                dropdownParent: $('#formModal')
            });
        }

        document.getElementById('btn-nuevo-vehiculo').addEventListener('click', function() {
            modalTitle.textContent = 'Nuevo Vehículo';
            fetch('{{ path('app_vehiculos_new') }}')
                .then(response => response.text()).then(html => {
                    modalBody.innerHTML = html;
                    initializeSelect2();
                    formModal.show();
                    attachFormSubmitListener();
                });
        });

        tablaBody.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('btn-editar')) {
                const row = e.target.closest('tr');
                const vehiculoId = row.dataset.id;
                modalTitle.textContent = `Editar Vehículo #${vehiculoId}`;
                const url = `{{ path('app_vehiculos_edit', {'id': 'ID_PLACEHOLDER'}) }}`.replace('ID_PLACEHOLDER', vehiculoId);

                fetch(url).then(response => response.text()).then(html => {
                    modalBody.innerHTML = html;
                    initializeSelect2();
                    formModal.show();
                    attachFormSubmitListener();
                });
            }
        });

        function attachFormSubmitListener() {
            const form = document.getElementById('formVehiculo');
            if (!form) return;

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const submitButton = form.querySelector('button[type="submit"]');
                const spinner = submitButton.querySelector('.spinner-border');
                spinner.classList.remove('d-none');
                submitButton.disabled = true;
                form.querySelectorAll('.form-error-message').forEach(el => el.innerHTML = '');

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                })
                .then(response => {
                    if (!response.ok) { return response.json().then(err => Promise.reject(err)); }
                    return response.json();
                })
                .then(data => {
                    if (data.status === 'success') {
                        $.notify({icon: 'fas fa-check-circle', title: '¡Éxito!', message: data.message},{type: 'success'});
                        const esEdicion = form.action.includes('/edit');
                        if (esEdicion) {
                            updateTableRow(data.vehiculo);
                        } else {
                            addTableRow(data.vehiculo);
                        }
                        formModal.hide();
                    }
                })
                .catch(errorData => {
                    if (errorData.errors) {
                        Object.keys(errorData.errors).forEach(fieldName => {
                            const errorContainer = form.querySelector(`[data-field-error="${fieldName}"]`);
                            if (errorContainer) {
                                errorContainer.innerHTML = `<p class="mb-0">${errorData.errors[fieldName].join(', ')}</p>`;
                            }
                        });
                        $.notify({icon: 'fas fa-exclamation-triangle', title: 'Error de Validación', message: errorData.message},{type: 'danger'});
                    } else {
                        $.notify({icon: 'fas fa-exclamation-triangle', title: 'Error', message: errorData.message || 'Ocurrió un error.'},{type: 'danger'});
                    }
                })
                .finally(() => {
                    spinner.classList.add('d-none');
                    submitButton.disabled = false;
                });
            });
        }

        function formatPrice(price) {
             if (price === null || isNaN(price)) {
                return '$ 0,00';
            }
            return new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS' }).format(price);
        }

        function updateTableRow(vehiculo) {
            const rowToUpdate = tablaBody.querySelector(`tr[data-id="${vehiculo.id}"]`);
            if (rowToUpdate) {
                rowToUpdate.querySelector('.vehiculo-desc').innerHTML = `
                    <span class="fw-bold">${vehiculo.marca.name} ${vehiculo.modelo.name}</span><br>
                    <small>${vehiculo.version.name}</small>
                `;
                rowToUpdate.querySelector('.vehiculo-ano').textContent = vehiculo.anio;
                rowToUpdate.querySelector('.vehiculo-color').textContent = vehiculo.color;
                rowToUpdate.querySelector('.vehiculo-precio').textContent = formatPrice(vehiculo.precio_venta_sugerido);
            }
        }

        function addTableRow(vehiculo) {
            document.getElementById('fila-sin-vehiculos')?.remove();
            const newRowHtml = `
                <tr data-id="${vehiculo.id}">
                    <td>${vehiculo.id}</td>
                    <td class="vehiculo-desc">
                        <span class="fw-bold">${vehiculo.marca.name} ${vehiculo.modelo.name}</span><br>
                        <small>${vehiculo.version.name}</small>
                    </td>
                    <td class="vehiculo-ano">${vehiculo.anio}</td>
                    <td class="vehiculo-color">${vehiculo.color}</td>
                    <td class="vehiculo-precio">${formatPrice(vehiculo.precio_venta_sugerido)}</td>
                    <td class="text-end">
                        <button class="btn btn-warning btn-sm btn-editar">Editar</button>
                    </td>
                </tr>`;
            tablaBody.insertAdjacentHTML('beforeend', newRowHtml);
        }
    });
    </script>
{% endblock %}