{% extends 'base.html.twig' %}
{% block title %}Gestión de Usuarios{% endblock %}

{% block body %}
<div class="page-header"><h3 class="fw-bold mb-3">Gestión de Usuarios</h3></div>
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex align-items-center">
                    <h4 class="card-title">Listado de Usuarios</h4>
                    <button id="btn-nuevo-usuario" class="btn btn-primary btn-round ms-auto">
                        <i class="fa fa-plus"></i> Agregar Usuario
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table id="tabla-usuarios" class="display table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nombre Completo</th>
                                <th>Email</th>
                                <th>Roles</th>
                                <th class="text-end">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                        {% for user in users %}
                            <tr data-id="{{ user.id }}">
                                <td>{{ user.id }}</td>
                                <td class="user-name">{{ user.completeName }}</td>
                                <td class="user-email">{{ user.email }}</td>
                                <td class="user-roles">
                                    {% for role in user.roles %}
                                        <span class="badge bg-info">{{ role|replace({'ROLE_': ''})|capitalize }}</span>
                                    {% endfor %}
                                </td>
                                <td class="text-end">
                                    <button class="btn btn-warning btn-sm btn-editar">Editar</button>
                                </td>
                            </tr>
                        {% else %}
                            {# DataTables manejará la tabla vacía #}
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="formModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="formModalLabel">Nuevo Usuario</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="modal-body-content"></div>
    </div>
  </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const formModal = new bootstrap.Modal(document.getElementById('formModal'));
    const modalBody = document.getElementById('modal-body-content');
    const modalTitle = document.getElementById('formModalLabel');

    $('#tabla-usuarios').DataTable({
        "pageLength": 10,
        "language": { "url": "https://cdn.datatables.net/plug-ins/1.10.25/i18n/Spanish.json", "emptyTable": "No se encontraron usuarios" },
        "order": [[ 0, "desc" ]]
    });

    const newButton = document.getElementById('btn-nuevo-usuario');
    if (newButton) {
        newButton.addEventListener('click', function() {
            modalTitle.textContent = 'Nuevo Usuario';
            fetch('{{ path('app_user_new') }}')
                .then(r => r.text()).then(html => {
                    modalBody.innerHTML = html;
                    formModal.show();
                    attachFormSubmitListener();
                });
        });
    }

    $('#tabla-usuarios tbody').on('click', '.btn-editar', function() {
        const row = $(this).closest('tr');
        const userId = row.data('id');
        modalTitle.textContent = `Editar Usuario #${userId}`;
        const url = `{{ path('app_user_edit', {'id': 'ID_PLACEHOLDER'}) }}`.replace('ID_PLACEHOLDER', userId);
        fetch(url).then(r => r.text()).then(html => {
            modalBody.innerHTML = html;
            formModal.show();
            attachFormSubmitListener();
        });
    });

    function attachFormSubmitListener() {
        const form = document.getElementById('formUser');
        if (!form) return;
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const btn = form.querySelector('button[type="submit"]');
            const spinner = btn.querySelector('.spinner-border');
            spinner.classList.remove('d-none');
            btn.disabled = true;
            form.querySelectorAll('.form-error-message').forEach(el => el.innerHTML = '');

            fetch(form.action, { 
                method: 'POST', 
                body: new FormData(form), 
                headers: {'X-Requested-With': 'XMLHttpRequest'} 
            })
            .then(async response => {
                let data;
                try {
                    data = await response.clone().json(); // clone para poder leer de nuevo si falla
                } catch (e) {
                    const html = await response.text();
                    modalBody.innerHTML = html;
                    attachFormSubmitListener();
                    throw { errors: null, message: "Formulario con errores" };
                }
                if (!response.ok) {
                    throw data;
                }
                return data;
            })
            .then(data => {
                if (data.status === 'success') {
                    $.notify(
                        {icon: 'fas fa-check-circle', title: '¡Éxito!', message: data.message},
                        {type: 'success'}
                    );
                    window.location.reload();
                }
            })
            .catch(errorData => {
                if (errorData.errors) {
                    Object.keys(errorData.errors).forEach(fieldName => {
                        const container = form.querySelector(`[data-field-error="${fieldName}"]`);
                        if (container) { 
                            container.innerHTML = `<p class="mb-0">${errorData.errors[fieldName].join(', ')}</p>`; 
                        }
                    });
                    $.notify(
                        {icon: 'fas fa-exclamation-triangle', title: 'Error de Validación', message: 'Por favor, corrija los errores.'},
                        {type: 'danger'}
                    );
                } else {
                    $.notify(
                        {icon: 'fas fa-exclamation-triangle', title: 'Error', message: errorData.message || 'Ocurrió un error.'},
                        {type: 'danger'}
                    );
                }
            })
            .finally(() => { 
                spinner.classList.add('d-none'); 
                btn.disabled = false; 
            });
        });
    }
});
</script>
{% endblock %}

