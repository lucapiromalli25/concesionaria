{% extends 'base.html.twig' %}

{% block title %}Registrar Venta de Vehículo{% endblock %}

{% block body %}
<div class="page-header">
    <h3 class="fw-bold mb-3">Registrar Venta</h3>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header"><h4 class="card-title">Vehículo a Vender</h4></div>
            <div class="card-body">
                <h5>{{ vehiculo.version.modelo.marca.name }} {{ vehiculo.version.modelo.name }}</h5>
                <p class="card-text">{{ vehiculo.version.name }} - Año {{ vehiculo.anio }}</p>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        Color: <span>{{ vehiculo.color }}</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        Chasis: <span>{{ vehiculo.chassisNumber }}</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        Precio Sugerido: <span class="fw-bold">${{ vehiculo.suggestedRetailPrice|number_format(2, ',', '.') }}</span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="card">
            <div class="card-header"><h4 class="card-title">Datos de la Venta</h4></div>
            <div class="card-body">
                {# Usamos un <form> normal en lugar de form_start para tener control total #}
                <form name="venta" method="post" action="{{ path('app_ventas_new', {'id': vehiculo.id}) }}" enctype="multipart/form-data">
                    <div class="form-group">
                        {{ form_label(form.cliente) }}
                        <div class="input-group">
                            {{ form_widget(form.cliente) }}
                            <button class="btn btn-primary" type="button" id="btn-add-nested-cliente">
                                <i class="fa fa-plus"></i>
                            </button>
                        </div>
                        <div class="text-danger form-error-message mt-1" data-field-error="cliente"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">{{ form_row(form.sale_date) }}</div>
                        <div class="col-md-4">{{ form_row(form.saleCurrency) }}</div>
                        <div class="col-md-4">{{ form_row(form.final_sale_price) }}</div>
                    </div>
                    {{ form_row(form.payment_method) }}

                    {# --- SECCIÓN DINÁMICA PARA EL PLAN DE PAGOS (HECHA CON JS) --- #}
                    <div id="installments-section" class="d-none mt-3">
                        <hr>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="mb-0">Plan de Pagos</h5>
                            <button type="button" class="btn btn-sm btn-primary" id="btn-add-installment">
                                <i class="fa fa-plus"></i> Añadir Cuota
                            </button>
                        </div>
                        <div class="alert alert-info d-flex justify-content-between p-2">
                            <span>Total a financiar: <strong id="total-a-financiar">$0.00</strong></span>
                            <span>Suma de cuotas: <strong id="suma-cuotas">$0.00</strong></span>
                            <span id="diferencia-cuotas" class="fw-bold"></span>
                        </div>
                        <div id="installments-editor">
                            {# Las filas de cuotas se añadirán aquí con JavaScript #}
                        </div>
                    </div>
                    
                    {{ form_row(form.observations) }}
                    {{ form_row(form.saleDocumentFile) }}
                    
                    {# Campo oculto para enviar los datos de las cuotas al controlador #}
                    <input type="hidden" name="installments_data" id="installments_data_input">
                    {{ form_widget(form._token) }} {# Importante para la seguridad de Symfony #}

                    <div class="text-end mt-3">
                        <a href="{{ path('app_vehiculos_index') }}" class="btn btn-danger">Cancelar</a>
                        <button type="submit" class="btn btn-success" id="btn-confirmar-venta">Confirmar Venta</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="nestedFormModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header"><h5 class="modal-title" id="nestedFormModalLabel">Nuevo Cliente</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
      <div class="modal-body" id="nested-modal-body-content"></div>
    </div>
  </div>
</div>
{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- INICIALIZACIÓN DE ELEMENTOS ---
        const mainForm = document.querySelector('form[name="venta"]');
        const clienteSelect = $('#venta_cliente');
        clienteSelect.select2({ placeholder: 'Buscar cliente...', width: '100%' });

        const paymentMethodSelect = document.getElementById('venta_payment_method');
        const installmentsSection = document.getElementById('installments-section');
        const addInstallmentBtn = document.getElementById('btn-add-installment');
        const installmentsEditor = document.getElementById('installments-editor');
        const confirmSaleBtn = document.getElementById('btn-confirmar-venta');
        const hiddenInstallmentsInput = document.getElementById('installments_data_input');
        
        let cuotaCounter = 0;

        // --- LÓGICA DE VISIBILIDAD DEL PLAN DE PAGOS ---
        function toggleInstallmentsUI() {
            const isFinanciado = paymentMethodSelect.value === 'Financiado';
            installmentsSection.classList.toggle('d-none', !isFinanciado);
            if (!isFinanciado) {
                installmentsEditor.innerHTML = '';
                cuotaCounter = 0;
            }
            updateInstallmentSum();
        }
        paymentMethodSelect.addEventListener('change', toggleInstallmentsUI);
        toggleInstallmentsUI();

        // --- AÑADIR/QUITAR FILAS DE CUOTAS ---
        addInstallmentBtn.addEventListener('click', function() {
            cuotaCounter++;
            const newRow = document.createElement('div');
            newRow.classList.add('row', 'align-items-center', 'mb-2', 'installment-row');
            
            newRow.innerHTML = `
                <div class="col-1"><span class="badge bg-secondary">${cuotaCounter}</span></div>
                <div class="col-5">
                    <input type="date" class="form-control due-date-input" required>
                </div>
                <div class="col-5">
                    <input type="number" step="0.01" class="form-control amount-input" placeholder="Monto" required>
                </div>
                <div class="col-1">
                    <button type="button" class="btn btn-danger btn-sm btn-remove-installment w-100"><i class="fa fa-trash"></i></button>
                </div>
            `;
            installmentsEditor.appendChild(newRow);
        });

        installmentsEditor.addEventListener('click', function(e) {
            if (e.target.closest('.btn-remove-installment')) {
                e.target.closest('.row.installment-row').remove();
                
                installmentsEditor.querySelectorAll('.badge.bg-secondary').forEach((badge, index) => {
                    badge.textContent = index + 1;
                });
                cuotaCounter = installmentsEditor.children.length;
                updateInstallmentSum();
            }
        });

        // --- VALIDACIÓN EN VIVO DE LA SUMA DE CUOTAS ---
        function updateInstallmentSum() {
            if (paymentMethodSelect.value !== 'Financiado') {
                confirmSaleBtn.disabled = false;
                return;
            }
            let sum = 0;
            installmentsEditor.querySelectorAll('.amount-input').forEach(input => { sum += parseFloat(input.value) || 0; });
            const totalAmount = parseFloat(document.getElementById('venta_final_sale_price').value) || 0;
            const diferencia = totalAmount - sum;
            
            document.getElementById('total-a-financiar').textContent = '$' + totalAmount.toFixed(2);
            document.getElementById('suma-cuotas').textContent = '$' + sum.toFixed(2);
            const diffEl = document.getElementById('diferencia-cuotas');
            diffEl.textContent = 'Diferencia: $' + diferencia.toFixed(2);
            
            if (Math.abs(diferencia) < 0.01 && installmentsEditor.children.length > 0) {
                diffEl.className = 'fw-bold text-success';
                confirmSaleBtn.disabled = false;
            } else {
                diffEl.className = 'fw-bold text-danger';
                confirmSaleBtn.disabled = true;
            }
        }
        
        installmentsEditor.addEventListener('input', updateInstallmentSum);
        document.getElementById('venta_final_sale_price').addEventListener('input', updateInstallmentSum);
        
        // --- PREPARAR DATOS ANTES DEL SUBMIT ---
        mainForm.addEventListener('submit', function(e) {
            if (paymentMethodSelect.value === 'Financiado') {
                const installments = [];
                installmentsEditor.querySelectorAll('.installment-row').forEach(row => {
                    installments.push({
                        dueDate: row.querySelector('.due-date-input').value,
                        amount: row.querySelector('.amount-input').value
                    });
                });
                hiddenInstallmentsInput.value = JSON.stringify(installments);
            }
        });

        // --- LÓGICA DE MODAL ANIDADO PARA CLIENTE (NO CAMBIA) ---
        const nestedModalEl = document.getElementById('nestedFormModal');
        const nestedFormModal = new bootstrap.Modal(nestedModalEl);
        const nestedModalBody = document.getElementById('nested-modal-body-content');

        document.getElementById('btn-add-nested-cliente').addEventListener('click', function() {
            fetch('{{ path('app_clientes_new') }}')
                .then(r => r.text()).then(html => {
                    nestedModalBody.innerHTML = html;
                    nestedFormModal.show();
                    attachNestedFormSubmitListener();
                });
        });

        function attachNestedFormSubmitListener() {
            const nestedForm = document.getElementById('formCliente');
            if (!nestedForm) return;
            nestedForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const btn = nestedForm.querySelector('button[type="submit"]');
                const spinner = btn.querySelector('.spinner-border');
                spinner.classList.remove('d-none');
                btn.disabled = true;

                fetch(nestedForm.action, { method: 'POST', body: new FormData(nestedForm), headers: {'X-Requested-with': 'XMLHttpRequest'} })
                .then(r => r.json()).then(data => {
                    if (data.status === 'success') {
                        const newClient = data.cliente;
                        const newOption = new Option(newClient.displayText, newClient.id, true, true);
                        clienteSelect.append(newOption).trigger('change');
                        nestedFormModal.hide();
                        $.notify({icon: 'fas fa-check-circle', title: '¡Éxito!', message: data.message},{type: 'success'});
                    } else {
                        Object.keys(data.errors).forEach(fieldName => {
                            const container = nestedForm.querySelector(`[data-field-error="${fieldName}"]`);
                            if (container) { container.innerHTML = `<p class="mb-0">${data.errors[fieldName].join(', ')}</p>`; }
                        });
                    }
                })
                .finally(() => {
                    spinner.classList.add('d-none');
                    btn.disabled = false;
                });
            });
        }
    });
    </script>
{% endblock %}